openapi: 3.0.1
info:
  title: REST API - Workshop CM
  description: REST API
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: produtos
    description: Produtos Collection

  - name: clientes
    description: Clientes Collection

paths:
  /produtos:
    get:
      tags:
        - produtos
      summary: List produtos
      operationId: listProdutos
      responses:
        200:
          description: List of produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Produto"
      x-codegen-request-body-name: body
    post:
      tags:
        - produtos
      summary: Add a new produto
      operationId: addProduto
      requestBody:
        description: Payload of produto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Produto"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /produtos/{productId}:
    get:
      tags:
        - produtos
      summary: Find produto by ID
      description: Returns a single produto
      operationId: getProdutoById
      parameters:
        - name: produtoId
          in: path
          description: ID of produto to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Produto not found
          content: {}
    put:
      tags:
        - produtos
      summary: Updates a produto
      operationId: updateProduto
      parameters:
        - name: produtoId
          in: path
          description: ID of produto that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Produto"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
    delete:
      tags:
        - produtos
      summary: Deletes a produto
      operationId: deleteProduto
      parameters:
        - name: produtoId
          in: path
          description: produto id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        206:
          description: Invalid ID supplied
          content: {}
        404:
          description: Produto not found
          content: {}
  /produtos?filter={filterName}:
    get:
      tags:
        - produtos
      summary: Find produto by Name
      description: List of produtos with Name containing filterName
      operationId: getProdutosByName
      parameters:
        - name: filterName
          in: path
          description: Name of produtos to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Produto"
        400:
          description: Invalid Name supplied
          content: {}
        404:
          description: No produto found
          content: {}

  /clients:
    get:
      tags:
        - clientes
      summary: List clientes
      operationId: listClientes
      responses:
        200:
          description: List of clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cliente"
      x-codegen-request-body-name: body

    post:
      tags:
        - clientes
      summary: Add a new cliente
      operationId: addClient
      requestBody:
        description: Payload of client
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cliente"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body

  /clients/{clientId}:
    get:
      tags:
        - clientes
      summary: Find cliente by ID
      description: Returns a single cliente
      operationId: getClienteById
      parameters:
        - name: clienteId
          in: path
          description: ID of cliente to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Cliente not found
          content: {}
    put:
      tags:
        - clientes
      summary: Updates a cliente
      operationId: updateCliente
      parameters:
        - name: clienteId
          in: path
          description: ID of cliente that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cliente"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
    delete:
      tags:
        - clientes
      summary: Deletes a cliente
      operationId: deleteCliente
      parameters:
        - name: clienteId
          in: path
          description: cliente id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        206:
          description: Invalid ID supplied
          content: {}
        404:
          description: Cliente not found
          content: {}

  /clients?filter={filterName}:
    get:
      tags:
        - clientes
      summary: Find client by Name
      description: List of clients with Name containing filterName
      operationId: getClientsByName
      parameters:
        - name: filterName
          in: path
          description: Name of cliente to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"
        400:
          description: Invalid name supplied
          content: {}
        404:
          description: No Cliente found
          content: {}
components:
  schemas:
    Produto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
    Cliente:
      required:
        - name
        - password
        - email
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: type:string
        email:
          type: string
        password:
          type: string
